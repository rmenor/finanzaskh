{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///Users/ramonmenor/trabajo/github/finanzasjw/src/lib/firebase.ts"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp, getApps, getApp } from 'firebase/app';\nimport { getFirestore } from 'firebase/firestore';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  projectId: 'finanzas-jw',\n  appId: '1:857727640897:web:5ed8d3d20e9b2452afadc0',\n  storageBucket: 'finanzas-jw.firebasestorage.app',\n  apiKey: 'AIzaSyBW7N7R4YGnIArQNL_5Onewntgq25RKnVo',\n  authDomain: 'finanzas-jw.firebaseapp.com',\n  messagingSenderId: '857727640897',\n};\n\n// Initialize Firebase\nconst app = !getApps().length ? initializeApp(firebaseConfig) : getApp();\nconst db = getFirestore(app);\n\n\nexport { app, db };\n"],"names":[],"mappings":"AAAA,uDAAuD;;;;;AACvD;AAAA;AACA;AAAA;;;AAEA,wCAAwC;AACxC,MAAM,iBAAiB;IACrB,WAAW;IACX,OAAO;IACP,eAAe;IACf,QAAQ;IACR,YAAY;IACZ,mBAAmB;AACrB;AAEA,sBAAsB;AACtB,MAAM,MAAM,CAAC,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,GAAG,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE,kBAAkB,CAAA,GAAA,oLAAA,CAAA,SAAM,AAAD;AACrE,MAAM,KAAK,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file:///Users/ramonmenor/trabajo/github/finanzasjw/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { db } from './firebase';\nimport {\n  collection,\n  addDoc,\n  updateDoc,\n  doc,\n  writeBatch,\n  Timestamp,\n} from 'firebase/firestore';\n\nconst IncomeSchema = z.object({\n  amount: z.coerce.number().positive({ message: 'La cantidad debe ser un número positivo.' }),\n  date: z.string().min(1, { message: 'La fecha es obligatoria.' }),\n  description: z.string().max(100, { message: 'La descripción debe tener 100 caracteres o menos.' }).optional(),\n  category: z.enum(['congregation', 'worldwide_work', 'renovation'], {\n    errorMap: () => ({ message: 'Por favor, selecciona una categoría válida.' }),\n  }),\n});\n\nconst ExpenseSchema = z.object({\n  amount: z.coerce.number().positive({ message: 'La cantidad debe ser un número positivo.' }),\n  date: z.string().min(1, { message: 'La fecha es obligatoria.' }),\n  description: z.string().max(100, { message: 'La descripción debe tener 100 caracteres o menos.' }).optional(),\n});\n\nconst BranchTransferSchema = z.object({\n  amount: z.coerce.number().positive({ message: 'La cantidad debe ser mayor que cero.' }),\n  date: z.string().min(1, { message: 'La fecha es obligatoria.' }),\n  description: z.string().max(100, { message: 'La descripción debe tener 100 caracteres o menos.' }).optional(),\n  transactionIds: z.array(z.string()).min(1, { message: 'Debes seleccionar al menos una transacción.' }),\n});\n\nconst UpdateTransactionSchema = z.object({\n    id: z.string(),\n    type: z.enum(['income', 'expense']),\n    amount: z.coerce.number().positive({ message: 'La cantidad debe ser un número positivo.' }),\n    date: z.string().min(1, { message: 'La fecha es obligatoria.' }),\n    description: z.string().max(100, { message: 'La descripción debe tener 100 caracteres o menos.' }).optional(),\n    category: z.enum(['congregation', 'worldwide_work', 'renovation']).optional(),\n    sentToBranch: z.boolean().optional(),\n});\n\nexport async function addIncomeAction(data: z.infer<typeof IncomeSchema>) {\n  const validatedFields = IncomeSchema.safeParse(data);\n\n  if (!validatedFields.success) {\n    return { success: false, message: 'Datos inválidos.', errors: validatedFields.error.flatten().fieldErrors };\n  }\n  \n  if (!db) {\n    return { success: false, message: 'La base de datos no está disponible.' };\n  }\n\n  try {\n    const { amount, date, description, category } = validatedFields.data;\n    await addDoc(collection(db, 'transactions'), {\n        type: 'income',\n        amount,\n        date: Timestamp.fromDate(new Date(date)),\n        description: description || '',\n        category,\n        sentToBranch: false,\n    });\n    revalidatePath('/dashboard');\n    return { success: true, message: 'Ingreso añadido correctamente.' };\n  } catch (e: any) {\n    return { success: false, message: e.message || 'Error al añadir el ingreso.' };\n  }\n}\n\nexport async function addExpenseAction(data: z.infer<typeof ExpenseSchema>) {\n  const validatedFields = ExpenseSchema.safeParse(data);\n\n  if (!validatedFields.success) {\n    return { success: false, message: 'Datos inválidos.', errors: validatedFields.error.flatten().fieldErrors };\n  }\n\n  if (!db) {\n    return { success: false, message: 'La base de datos no está disponible.' };\n  }\n\n  try {\n    const { amount, date, description } = validatedFields.data;\n    await addDoc(collection(db, 'transactions'), {\n        type: 'expense',\n        amount,\n        date: Timestamp.fromDate(new Date(date)),\n        description: description || '',\n     });\n    revalidatePath('/dashboard');\n    return { success: true, message: 'Gasto añadido correctamente.' };\n  } catch (e: any) {\n    return { success: false, message: e.message || 'Error al añadir el gasto.' };\n  }\n}\n\nexport async function addBranchTransferAction(data: z.infer<typeof BranchTransferSchema>) {\n    const validatedFields = BranchTransferSchema.safeParse(data);\n  \n    if (!validatedFields.success) {\n      return { success: false, message: 'Datos inválidos.', errors: validatedFields.error.flatten().fieldErrors };\n    }\n\n    if (!db) {\n      return { success: false, message: 'La base de datos no está disponible.' };\n    }\n  \n    try {\n      const { amount, date, description, transactionIds } = validatedFields.data;\n      \n      const batch = writeBatch(db);\n\n      // Mark selected transactions as sent\n      transactionIds.forEach(id => {\n          const docRef = doc(db, 'transactions', id);\n          batch.update(docRef, { sentToBranch: true });\n      });\n\n      // Add the new branch_transfer transaction\n      const newTransferRef = doc(collection(db, 'transactions'));\n      batch.set(newTransferRef, {\n        amount, \n        date: Timestamp.fromDate(new Date(date)), \n        type: 'branch_transfer', \n        description: description || 'Envío a la sucursal',\n      });\n\n      await batch.commit();\n\n      revalidatePath('/dashboard');\n      return { success: true, message: 'Envío a la sucursal añadido correctamente.' };\n    } catch (e: any) {\n      return { success: false, message: e.message || 'Error al añadir el envío a la sucursal.' };\n    }\n  }\n\nexport async function updateTransactionAction(data: z.infer<typeof UpdateTransactionSchema>) {\n    const validatedFields = UpdateTransactionSchema.safeParse(data);\n\n    if (!validatedFields.success) {\n        return { success: false, message: 'Datos inválidos.', errors: validatedFields.error.flatten().fieldErrors };\n    }\n\n    if (!db) {\n        return { success: false, message: 'La base de datos no está disponible.' };\n    }\n\n    try {\n        const { id, ...rest } = validatedFields.data;\n        \n        const transactionRef = doc(db, 'transactions', id);\n        \n        // Firestore requires a plain object.\n        const updateData: any = {\n            ...rest,\n            date: Timestamp.fromDate(new Date(rest.date)),\n            description: rest.description || '',\n        };\n\n        // Remove undefined fields so Firestore doesn't overwrite them\n        Object.keys(updateData).forEach(key => updateData[key] === undefined && delete updateData[key]);\n        \n        await updateDoc(transactionRef, updateData);\n\n        revalidatePath('/dashboard');\n        return { success: true, message: 'Transacción actualizada correctamente.' };\n    } catch (e: any) {\n        const message = e instanceof Error ? e.message : 'Ocurrió un error desconocido.';\n        return { success: false, message: `Error al actualizar la transacción: ${message}` };\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 403, "column": 0}, "map": {"version":3,"sources":["file:///Users/ramonmenor/trabajo/github/finanzasjw/.next-internal/server/app/dashboard/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {addIncomeAction as '40f31bab04db97c60f92086038abade741566d0a98'} from 'ACTIONS_MODULE0'\nexport {addExpenseAction as '4075b38ee18d5d5f3ed91a544fbce782485130bc88'} from 'ACTIONS_MODULE0'\nexport {addBranchTransferAction as '400b903e5b214d2b26dd8d0d43da57c3dff4ffd014'} from 'ACTIONS_MODULE0'\nexport {updateTransactionAction as '40621b0f87d67a854d8a572d5914f58ff7c4c088b9'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 464, "column": 0}, "map": {"version":3,"sources":["file:///Users/ramonmenor/trabajo/github/finanzasjw/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8R,GAC3T,4DACA","debugId":null}},
    {"offset": {"line": 478, "column": 0}, "map": {"version":3,"sources":["file:///Users/ramonmenor/trabajo/github/finanzasjw/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0Q,GACvS,wCACA","debugId":null}},
    {"offset": {"line": 492, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}